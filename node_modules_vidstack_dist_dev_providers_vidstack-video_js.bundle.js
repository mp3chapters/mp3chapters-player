"use strict";
(self["webpackChunkmp3chapters_player"] = self["webpackChunkmp3chapters_player"] || []).push([["node_modules_vidstack_dist_dev_providers_vidstack-video_js"],{

/***/ "./node_modules/vidstack/dist/dev/providers/vidstack-video.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/providers/vidstack-video.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoProvider: () => (/* binding */ VideoProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-S5-ZnP-2.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-S5-ZnP-2.js");
/* harmony import */ var _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-html.js */ "./node_modules/vidstack/dist/dev/providers/vidstack-html.js");
/* harmony import */ var _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-Yx-0ZQdX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-Yx-0ZQdX.js");







class NativeHLSTextTracks {
  constructor(_video, _ctx) {
    this._video = _video;
    this._ctx = _ctx;
    _video.textTracks.onaddtrack = this._onAddTrack.bind(this);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(this._onDispose.bind(this));
  }
  _onAddTrack(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this._video, nativeTrack))
      return;
    const track = new _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.b({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._native] = { track: nativeTrack };
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._readyState] = 2;
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._nativeHLS] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this._ctx.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  _onDispose() {
    this._video.textTracks.onaddtrack = null;
    for (const track of this._ctx.textTracks) {
      const nativeTrack = track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._native]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this._video = _video;
    this._media = _media;
    this._onChange = (active, event) => {
      this._media.delegate._notify("picture-in-picture-change", active, event);
    };
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "enterpictureinpicture", this._onEnter.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "leavepictureinpicture", this._onExit.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this._video;
  }
  get supported() {
    return (0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.d)(this._video);
  }
  async enter() {
    return this._video.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  _onEnter(event) {
    this._onChange(true, event);
  }
  _onExit(event) {
    this._onChange(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this._video = _video;
    this._media = _media;
    this._mode = "inline";
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "webkitpresentationmodechanged", this._onModeChange.bind(this));
  }
  get _supported() {
    return (0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.e)(this._video);
  }
  async _setPresentationMode(mode) {
    if (this._mode === mode)
      return;
    this._video.webkitSetPresentationMode(mode);
  }
  _onModeChange(event) {
    const prevMode = this._mode;
    this._mode = this._video.webkitPresentationMode;
    {
      this._media.logger?.infoGroup("presentation mode change").labelledLog("Mode", this._mode).labelledLog("Event", event).dispatch();
    }
    this._media.player?.dispatch(
      new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("video-presentation-change", {
        detail: this._mode,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this._mode === type || prevMode === type) {
        this._media.delegate._notify(`${type}-change`, this._mode === type, event);
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this._presentation = _presentation;
  }
  get active() {
    return this._presentation._mode === "fullscreen";
  }
  get supported() {
    return this._presentation._supported;
  }
  async enter() {
    this._presentation._setPresentationMode("fullscreen");
  }
  async exit() {
    this._presentation._setPresentationMode("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this._presentation = _presentation;
  }
  get active() {
    return this._presentation._mode === "picture-in-picture";
  }
  get supported() {
    return this._presentation._supported;
  }
  async enter() {
    this._presentation._setPresentationMode("picture-in-picture");
  }
  async exit() {
    this._presentation._setPresentationMode("inline");
  }
}

class VideoProvider extends _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__.HTMLMediaProvider {
  constructor(video, ctx) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.s)(() => {
      if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.e)(video)) {
        const presentation = new VideoPresentation(video, ctx);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.d)(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, ctx);
      }
    }, this.scope);
  }
  get type() {
    return "video";
  }
  setup(ctx) {
    super.setup(ctx);
    if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.video)) {
      new NativeHLSTextTracks(this.video, ctx);
    }
    ctx.textRenderers._attachVideo(this.video);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(() => {
      ctx.textRenderers._attachVideo(null);
    });
    if (this.type === "video")
      ctx.delegate._notify("provider-setup", this);
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this._media;
  }
}




/***/ })

}]);
//# sourceMappingURL=node_modules_vidstack_dist_dev_providers_vidstack-video_js.bundle.js.map