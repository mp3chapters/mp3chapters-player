"use strict";
(self["webpackChunkmp3chapters_player"] = self["webpackChunkmp3chapters_player"] || []).push([["vendors-node_modules_vidstack_dist_dev_providers_vidstack-vimeo_js"],{

/***/ "./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RAFLoop)
/* harmony export */ });
/* harmony import */ var _vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");


class RAFLoop {
  constructor(_callback) {
    this._callback = _callback;
  }
  _start() {
    if (!(0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(this._id))
      return;
    this._loop();
  }
  _stop() {
    if ((0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.a)(this._id))
      window.cancelAnimationFrame(this._id);
    this._id = void 0;
  }
  _loop() {
    this._id = window.requestAnimationFrame(() => {
      if ((0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(this._id))
        return;
      this._callback();
      this._loop();
    });
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dist/dev/chunks/vidstack-ZED4myhE.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/chunks/vidstack-ZED4myhE.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ EmbedProvider),
/* harmony export */   t: () => (/* binding */ timedPromise)
/* harmony export */ });
/* harmony import */ var _vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./vidstack-Yx-0ZQdX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-Yx-0ZQdX.js");



function timedPromise(callback, ms = 3e3) {
  const promise = (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.v)();
  setTimeout(() => {
    const rejection = callback();
    if (rejection)
      promise.reject(rejection);
  }, ms);
  return promise;
}

class EmbedProvider {
  constructor(_iframe) {
    this._iframe = _iframe;
    this._src = (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.m)("");
    /**
     * Defines which referrer is sent when fetching the resource.
     *
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy}
     */
    this.referrerPolicy = null;
    _iframe.setAttribute("frameBorder", "0");
    _iframe.setAttribute(
      "allow",
      "autoplay; fullscreen; encrypted-media; picture-in-picture; accelerometer; gyroscope"
    );
    if (this.referrerPolicy !== null) {
      _iframe.setAttribute("referrerpolicy", this.referrerPolicy);
    }
  }
  get iframe() {
    return this._iframe;
  }
  setup(ctx) {
    (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.e)(this._watchSrc.bind(this));
    (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(window, "message", this._onWindowMessage.bind(this));
    (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._iframe, "load", this._onLoad.bind(this));
  }
  _watchSrc() {
    const src = this._src();
    if (!src.length) {
      this._iframe.setAttribute("src", "");
      return;
    }
    const params = (0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(() => this._buildParams());
    this._iframe.setAttribute("src", (0,_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.a)(src, params));
  }
  _postMessage(message, target) {
    this._iframe.contentWindow?.postMessage(JSON.stringify(message), target ?? "*");
  }
  _onWindowMessage(event) {
    const origin = this._getOrigin(), isOriginMatch = event.source === this._iframe?.contentWindow && (!(0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(origin) || origin === event.origin);
    if (!isOriginMatch)
      return;
    try {
      const message = JSON.parse(event.data);
      if (message)
        this._onMessage(message, event);
      return;
    } catch (e) {
    }
    if (event.data)
      this._onMessage(event.data, event);
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dist/dev/providers/vidstack-vimeo.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/providers/vidstack-vimeo.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VimeoProvider: () => (/* binding */ VimeoProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-DTSGQ87h.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-DTSGQ87h.js");
/* harmony import */ var _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-Yx-0ZQdX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-Yx-0ZQdX.js");
/* harmony import */ var _chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../chunks/vidstack-S5-ZnP-2.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-S5-ZnP-2.js");
/* harmony import */ var _chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../chunks/vidstack-wDXs-Qf-.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-wDXs-Qf-.js");
/* harmony import */ var _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-IUoxhowK.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js");
/* harmony import */ var _chunks_vidstack_ZED4myhE_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-ZED4myhE.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-ZED4myhE.js");








const trackedVimeoEvents = [
  "bufferend",
  "bufferstart",
  // 'cuechange',
  "durationchange",
  "ended",
  "enterpictureinpicture",
  "error",
  "fullscreenchange",
  "leavepictureinpicture",
  "loaded",
  // 'loadeddata',
  // 'loadedmetadata',
  // 'loadstart',
  "playProgress",
  "loadProgress",
  "pause",
  "play",
  "playbackratechange",
  // 'progress',
  "qualitychange",
  "seeked",
  "seeking",
  // 'texttrackchange',
  "timeupdate",
  "volumechange",
  "waiting"
  // 'adstarted',
  // 'adcompleted',
  // 'aderror',
  // 'adskipped',
  // 'adallcompleted',
  // 'adclicked',
  // 'chapterchange',
  // 'chromecastconnected',
  // 'remoteplaybackavailabilitychange',
  // 'remoteplaybackconnecting',
  // 'remoteplaybackconnect',
  // 'remoteplaybackdisconnect',
  // 'liveeventended',
  // 'liveeventstarted',
  // 'livestreamoffline',
  // 'livestreamonline',
];

class VimeoProvider extends _chunks_vidstack_ZED4myhE_js__WEBPACK_IMPORTED_MODULE_0__.E {
  constructor() {
    super(...arguments);
    this.$$PROVIDER_TYPE = "VIMEO";
    this.scope = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.q)();
    this._played = 0;
    this._playedRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, 0);
    this._seekableRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, 0);
    this._playPromise = null;
    this._pausePromise = null;
    this._videoInfoPromise = null;
    this._videoId = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.m)("");
    this._pro = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.m)(false);
    this._hash = null;
    this._currentSrc = null;
    this._currentCue = null;
    this._timeRAF = new _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_3__.R(this._onAnimationFrame.bind(this));
    /**
     * Whether tracking session data should be enabled on the embed, including cookies and analytics.
     * This is turned off by default to be GDPR-compliant.
     *
     * @defaultValue `false`
     */
    this.cookies = false;
    this.title = true;
    this.byline = true;
    this.portrait = true;
    this.color = "00ADEF";
  }
  static {
    this._videoIdRE = /(?:https:\/\/)?(?:player\.)?vimeo(?:\.com)?\/(?:video\/)?(\d+)(?:\?hash=(.*))?/;
  }
  static {
    this._infoCache = /* @__PURE__ */ new Map();
  }
  get _notify() {
    return this._ctx.delegate._notify;
  }
  get type() {
    return "vimeo";
  }
  get currentSrc() {
    return this._currentSrc;
  }
  get videoId() {
    return this._videoId();
  }
  get hash() {
    return this._hash;
  }
  get isPro() {
    return this._pro();
  }
  preconnect() {
    const connections = [
      this._getOrigin(),
      "https://i.vimeocdn.com",
      "https://f.vimeocdn.com",
      "https://fresnel.vimeocdn.com"
    ];
    for (const url of connections) {
      (0,_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_4__.p)(url, "preconnect");
    }
  }
  setup(ctx) {
    this._ctx = ctx;
    super.setup(ctx);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.e)(this._watchVideoId.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.e)(this._watchVideoInfo.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.e)(this._watchPro.bind(this));
    this._notify("provider-setup", this);
  }
  destroy() {
    this._reset();
    this._remote("destroy");
  }
  async play() {
    const { paused } = this._ctx.$state;
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.p)(paused))
      return;
    if (!this._playPromise) {
      this._playPromise = (0,_chunks_vidstack_ZED4myhE_js__WEBPACK_IMPORTED_MODULE_0__.t)(() => {
        this._playPromise = null;
        if (paused())
          return "Timed out.";
      });
      this._remote("play");
    }
    return this._playPromise.promise;
  }
  async pause() {
    const { paused } = this._ctx.$state;
    if ((0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.p)(paused))
      return;
    if (!this._pausePromise) {
      this._pausePromise = (0,_chunks_vidstack_ZED4myhE_js__WEBPACK_IMPORTED_MODULE_0__.t)(() => {
        this._pausePromise = null;
        if (!paused())
          return "Timed out.";
      });
      this._remote("pause");
    }
    return this._pausePromise.promise;
  }
  setMuted(muted) {
    this._remote("setMuted", muted);
  }
  setCurrentTime(time) {
    this._remote("seekTo", time);
  }
  setVolume(volume) {
    this._remote("setVolume", volume);
    this._remote("setMuted", (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.p)(this._ctx.$state.muted));
  }
  setPlaybackRate(rate) {
    this._remote("setPlaybackRate", rate);
  }
  async loadSource(src) {
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.r)(src.src)) {
      this._currentSrc = null;
      this._hash = null;
      this._videoId.set("");
      return;
    }
    const matches = src.src.match(VimeoProvider._videoIdRE), videoId = matches?.[1], hash = matches?.[2];
    this._videoId.set(videoId ?? "");
    this._hash = hash ?? null;
    this._currentSrc = src;
  }
  _watchVideoId() {
    this._reset();
    const videoId = this._videoId();
    if (!videoId) {
      this._src.set("");
      return;
    }
    this._src.set(`${this._getOrigin()}/video/${videoId}`);
  }
  _watchVideoInfo() {
    const src = this._src(), videoId = this._videoId(), cache = VimeoProvider._infoCache, info = cache.get(videoId);
    if (!videoId)
      return;
    const promise = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.v)();
    this._videoInfoPromise = promise;
    if (info) {
      promise.resolve(info);
      return;
    }
    const oembedSrc = `https://vimeo.com/api/oembed.json?url=${src}`, abort = new AbortController();
    window.fetch(oembedSrc, {
      mode: "cors",
      signal: abort.signal
    }).then((response) => response.json()).then((data) => {
      const thumnailRegex = /vimeocdn.com\/video\/(.*)?_/, thumbnailId = data?.thumbnail_url?.match(thumnailRegex)?.[1], poster = thumbnailId ? `https://i.vimeocdn.com/video/${thumbnailId}_1920x1080.webp` : "", info2 = {
        title: data?.title ?? "",
        duration: data?.duration ?? 0,
        poster,
        pro: data.account_type !== "basic"
      };
      cache.set(videoId, info2);
      promise.resolve(info2);
    }).catch((e) => {
      promise.reject();
      this._notify("error", {
        message: `Failed to fetch vimeo video info from \`${oembedSrc}\`.`,
        code: 1,
        error: (0,_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_5__.c)(e)
      });
    });
    return () => {
      promise.reject();
      abort.abort();
    };
  }
  _watchPro() {
    const isPro = this._pro(), { $state, qualities } = this._ctx;
    $state.canSetPlaybackRate.set(isPro);
    qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_6__.L._setReadonly](!isPro);
    if (isPro) {
      return (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.l)(qualities, "change", () => {
        if (qualities.auto)
          return;
        const id = qualities.selected?.id;
        if (id)
          this._remote("setQuality", id);
      });
    }
  }
  _getOrigin() {
    return "https://player.vimeo.com";
  }
  _buildParams() {
    const { $iosControls } = this._ctx, { keyDisabled } = this._ctx.$props, { controls, playsinline } = this._ctx.$state, showControls = controls() || $iosControls();
    return {
      title: this.title,
      byline: this.byline,
      color: this.color,
      portrait: this.portrait,
      controls: showControls,
      h: this.hash,
      keyboard: showControls && !keyDisabled(),
      transparent: true,
      playsinline: playsinline(),
      dnt: !this.cookies
    };
  }
  _onAnimationFrame() {
    this._remote("getCurrentTime");
  }
  _onTimeUpdate(time, trigger) {
    const { currentTime, paused, seeking, bufferedEnd } = this._ctx.$state;
    if (seeking() && paused()) {
      this._remote("getBuffered");
      if (bufferedEnd() > time)
        this._notify("seeked", time, trigger);
    }
    if (currentTime() === time)
      return;
    const prevTime = currentTime(), detail = {
      currentTime: time,
      played: this._played >= time ? this._playedRange : this._playedRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, this._played = time)
    };
    this._notify("time-update", detail, trigger);
    if (Math.abs(prevTime - time) > 1.5) {
      this._notify("seeking", time, trigger);
      if (!paused() && bufferedEnd() < time) {
        this._notify("waiting", void 0, trigger);
      }
    }
  }
  _onSeeked(time, trigger) {
    this._notify("seeked", time, trigger);
  }
  _onReady(trigger) {
    const videoId = this._videoId();
    this._videoInfoPromise?.promise.then((info) => {
      if (!info)
        return;
      const { title, poster, duration, pro } = info, { $iosControls } = this._ctx, { controls } = this._ctx.$state, showControls = controls() || $iosControls();
      this._timeRAF._start();
      this._pro.set(pro);
      this._seekableRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, duration);
      this._notify("poster-change", poster, trigger);
      this._notify("title-change", title, trigger);
      this._notify("duration-change", duration, trigger);
      const detail = {
        buffered: new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, 0),
        seekable: this._seekableRange,
        duration
      };
      this._ctx.delegate._ready(detail, trigger);
      if (!showControls) {
        this._remote("_hideOverlay");
      }
      this._remote("getQualities");
    }).catch((e) => {
      if (videoId !== this._videoId())
        return;
      this._notify("error", {
        message: `Failed to fetch oembed data`,
        code: 2,
        error: (0,_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_5__.c)(e)
      });
    });
  }
  _onMethod(method, data, trigger) {
    switch (method) {
      case "getCurrentTime":
        this._onTimeUpdate(data, trigger);
        break;
      case "getBuffered":
        if ((0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.w)(data) && data.length) {
          this._onLoadProgress(data[data.length - 1][1], trigger);
        }
        break;
      case "setMuted":
        this._onVolumeChange((0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.p)(this._ctx.$state.volume), data, trigger);
        break;
      case "getChapters":
        break;
      case "getQualities":
        this._onQualitiesChange(data, trigger);
        break;
    }
  }
  _attachListeners() {
    for (const type of trackedVimeoEvents) {
      this._remote("addEventListener", type);
    }
  }
  _onPause(trigger) {
    this._notify("pause", void 0, trigger);
    this._pausePromise?.resolve();
    this._pausePromise = null;
  }
  _onPlay(trigger) {
    this._notify("play", void 0, trigger);
    this._playPromise?.resolve();
    this._playPromise = null;
  }
  _onPlayProgress(trigger) {
    const { paused } = this._ctx.$state;
    if (!paused()) {
      this._notify("playing", void 0, trigger);
    }
  }
  _onLoadProgress(buffered, trigger) {
    const detail = {
      buffered: new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, buffered),
      seekable: this._seekableRange
    };
    this._notify("progress", detail, trigger);
  }
  _onBufferStart(trigger) {
    this._notify("waiting", void 0, trigger);
  }
  _onBufferEnd(trigger) {
    const { paused } = this._ctx.$state;
    if (!paused())
      this._notify("playing", void 0, trigger);
  }
  _onWaiting(trigger) {
    const { paused } = this._ctx.$state;
    if (paused()) {
      this._notify("play", void 0, trigger);
    }
    this._notify("waiting", void 0, trigger);
  }
  _onVolumeChange(volume, muted, trigger) {
    const detail = { volume, muted };
    this._notify("volume-change", detail, trigger);
  }
  // protected _onTextTrackChange(track: VimeoTextTrack, trigger: Event) {
  //   const textTrack = this._ctx.textTracks.toArray().find((t) => t.language === track.language);
  //   if (textTrack) textTrack.mode = track.mode;
  // }
  // protected _onTextTracksChange(tracks: VimeoTextTrack[], trigger: Event) {
  //   for (const init of tracks) {
  //     const textTrack = new TextTrack({
  //       ...init,
  //       label: init.label.replace('auto-generated', 'auto'),
  //     });
  //     textTrack[TextTrackSymbol._readyState] = 2;
  //     this._ctx.textTracks.add(textTrack, trigger);
  //     textTrack.setMode(init.mode, trigger);
  //   }
  // }
  // protected _onCueChange(cue: VimeoTextCue, trigger: Event) {
  //   const { textTracks, $state } = this._ctx,
  //     { currentTime } = $state,
  //     track = textTracks.selected;
  //   if (this._currentCue) track?.removeCue(this._currentCue, trigger);
  //   this._currentCue = new window.VTTCue(currentTime(), Number.MAX_SAFE_INTEGER, cue.text);
  //   track?.addCue(this._currentCue, trigger);
  // }
  _onQualitiesChange(qualities, trigger) {
    this._ctx.qualities[_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_5__.Q._enableAuto] = qualities.some((q) => q.id === "auto") ? () => {
      this._remote("setQuality", "auto");
    } : void 0;
    for (const quality of qualities) {
      if (quality.id === "auto")
        continue;
      const height = +quality.id.slice(0, -1);
      if (isNaN(height))
        continue;
      this._ctx.qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_6__.L._add](
        {
          id: quality.id,
          width: height * (16 / 9),
          height,
          codec: "avc1,h.264",
          bitrate: -1
        },
        trigger
      );
    }
    this._onQualityChange(
      qualities.find((q) => q.active),
      trigger
    );
  }
  _onQualityChange({ id } = {}, trigger) {
    if (!id)
      return;
    const isAuto = id === "auto", newQuality = this._ctx.qualities.toArray().find((q) => q.id === id);
    if (isAuto) {
      this._ctx.qualities[_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_5__.Q._setAuto](isAuto, trigger);
      this._ctx.qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_6__.L._select](void 0, true, trigger);
    } else {
      this._ctx.qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_6__.L._select](newQuality, true, trigger);
    }
  }
  _onEvent(event, payload, trigger) {
    switch (event) {
      case "ready":
        this._attachListeners();
        break;
      case "loaded":
        this._onReady(trigger);
        break;
      case "play":
        this._onPlay(trigger);
        break;
      case "playProgress":
        this._onPlayProgress(trigger);
        break;
      case "pause":
        this._onPause(trigger);
        break;
      case "loadProgress":
        this._onLoadProgress(payload.seconds, trigger);
        break;
      case "waiting":
        this._onWaiting(trigger);
        break;
      case "bufferstart":
        this._onBufferStart(trigger);
        break;
      case "bufferend":
        this._onBufferEnd(trigger);
        break;
      case "volumechange":
        this._onVolumeChange(payload.volume, (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_1__.p)(this._ctx.$state.muted), trigger);
        break;
      case "durationchange":
        this._seekableRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, payload.duration);
        this._notify("duration-change", payload.duration, trigger);
        break;
      case "playbackratechange":
        this._notify("rate-change", payload.playbackRate, trigger);
        break;
      case "qualitychange":
        this._onQualityChange(payload, trigger);
        break;
      case "fullscreenchange":
        this._notify("fullscreen-change", payload.fullscreen, trigger);
        break;
      case "enterpictureinpicture":
        this._notify("picture-in-picture-change", true, trigger);
        break;
      case "leavepictureinpicture":
        this._notify("picture-in-picture-change", false, trigger);
        break;
      case "ended":
        this._notify("end", void 0, trigger);
        break;
      case "error":
        this._onError(payload, trigger);
        break;
      case "seeked":
        this._onSeeked(payload.seconds, trigger);
        break;
    }
  }
  _onError(error, trigger) {
    if (error.method === "play") {
      this._playPromise?.reject(error.message);
      return;
    }
    {
      this._ctx.logger?.errorGroup(`[vimeo]: ${error.message}`).labelledLog("Error", error).labelledLog("Provider", this).labelledLog("Event", trigger).dispatch();
    }
  }
  _onMessage(message, event) {
    if (message.event) {
      this._onEvent(message.event, message.data, event);
    } else if (message.method) {
      this._onMethod(message.method, message.value, event);
    }
  }
  _onLoad() {
  }
  _remote(command, arg) {
    return this._postMessage({
      method: command,
      value: arg
    });
  }
  _reset() {
    this._timeRAF._stop();
    this._played = 0;
    this._playedRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, 0);
    this._seekableRange = new _chunks_vidstack_DTSGQ87h_js__WEBPACK_IMPORTED_MODULE_2__.T(0, 0);
    this._playPromise = null;
    this._pausePromise = null;
    this._videoInfoPromise = null;
    this._currentCue = null;
    this._pro.set(false);
  }
}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_vidstack_dist_dev_providers_vidstack-vimeo_js.bundle.js.map