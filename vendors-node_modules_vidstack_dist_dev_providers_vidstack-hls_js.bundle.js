"use strict";
(self["webpackChunkmp3chapters_player"] = self["webpackChunkmp3chapters_player"] || []).push([["vendors-node_modules_vidstack_dist_dev_providers_vidstack-hls_js"],{

/***/ "./node_modules/vidstack/dist/dev/providers/vidstack-hls.js":
/*!******************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/providers/vidstack-hls.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HLSProvider: () => (/* binding */ HLSProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-Yx-0ZQdX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-Yx-0ZQdX.js");
/* harmony import */ var _chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../chunks/vidstack-S5-ZnP-2.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-S5-ZnP-2.js");
/* harmony import */ var _vidstack_video_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vidstack-video.js */ "./node_modules/vidstack/dist/dev/providers/vidstack-video.js");
/* harmony import */ var _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-wDXs-Qf-.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-wDXs-Qf-.js");
/* harmony import */ var _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-IUoxhowK.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js");









const toDOMEventType = (type) => (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.K)(type);
class HLSController {
  constructor(_video) {
    this._video = _video;
    this._instance = null;
    this._stopLiveSync = null;
    this._config = {};
    this._callbacks = /* @__PURE__ */ new Set();
    this._retryLoadingTimer = -1;
  }
  get instance() {
    return this._instance;
  }
  setup(ctor, ctx) {
    this._ctx = ctx;
    const isLive = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(ctx.$state.streamType).includes("live"), isLiveLowLatency = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(ctx.$state.streamType).includes("ll-");
    this._instance = new ctor({
      lowLatencyMode: isLiveLowLatency,
      backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,
      renderTextTracksNatively: false,
      ...this._config
    });
    const dispatcher = this._dispatchHLSEvent.bind(this);
    for (const event of Object.values(ctor.Events))
      this._instance.on(event, dispatcher);
    this._instance.on(ctor.Events.ERROR, this._onError.bind(this));
    for (const callback of this._callbacks)
      callback(this._instance);
    ctx.player.dispatch(new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("hls-instance", { detail: this._instance }));
    this._instance.attachMedia(this._video);
    this._instance.on(ctor.Events.FRAG_LOADING, this._onFragLoading.bind(this));
    this._instance.on(ctor.Events.AUDIO_TRACK_SWITCHED, this._onAudioSwitch.bind(this));
    this._instance.on(ctor.Events.LEVEL_SWITCHED, this._onLevelSwitched.bind(this));
    this._instance.on(ctor.Events.LEVEL_LOADED, this._onLevelLoaded.bind(this));
    this._instance.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this._onTracksFound.bind(this));
    this._instance.on(ctor.Events.CUES_PARSED, this._onCuesParsed.bind(this));
    ctx.qualities[_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_1__.Q._enableAuto] = this._enableAutoQuality.bind(this);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(ctx.qualities, "change", this._onQualityChange.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(ctx.audioTracks, "change", this._onAudioChange.bind(this));
    this._stopLiveSync = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.e)(this._liveSync.bind(this));
  }
  _liveSync() {
    if (!this._ctx.$state.live())
      return;
    const raf = new _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_2__.R(this._liveSyncPosition.bind(this));
    raf._start();
    return raf._stop.bind(raf);
  }
  _liveSyncPosition() {
    this._ctx.$state.liveSyncPosition.set(this._instance?.liveSyncPosition ?? Infinity);
  }
  _dispatchHLSEvent(eventType, detail) {
    this._ctx.player?.dispatch(new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(toDOMEventType(eventType), { detail }));
  }
  _onTracksFound(eventType, data) {
    const event = new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(eventType, { detail: data });
    let currentTrack = -1;
    for (let i = 0; i < data.tracks.length; i++) {
      const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__.b({
        id: `hls-${nonNativeTrack.kind}${i}`,
        src: init?.url,
        label: nonNativeTrack.label,
        language: init?.lang,
        kind: nonNativeTrack.kind
      });
      track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__.T._readyState] = 2;
      track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__.T._onModeChange] = () => {
        if (track.mode === "showing") {
          this._instance.subtitleTrack = i;
          currentTrack = i;
        } else if (currentTrack === i) {
          this._instance.subtitleTrack = -1;
          currentTrack = -1;
        }
      };
      if (nonNativeTrack.default)
        track.setMode("showing", event);
      this._ctx.textTracks.add(track, event);
    }
  }
  _onCuesParsed(eventType, data) {
    const track = this._ctx.textTracks.getById(`hls-${data.track}`);
    if (!track)
      return;
    const event = new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(eventType, { detail: data });
    for (const cue of data.cues) {
      cue.positionAlign = "auto";
      track.addCue(cue, event);
    }
  }
  _onAudioSwitch(eventType, data) {
    const track = this._ctx.audioTracks[data.id];
    if (track) {
      this._ctx.audioTracks[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.L._select](
        track,
        true,
        new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(eventType, { detail: data })
      );
    }
  }
  _onLevelSwitched(eventType, data) {
    const quality = this._ctx.qualities[data.level];
    if (quality) {
      this._ctx.qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.L._select](
        quality,
        true,
        new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(eventType, { detail: data })
      );
    }
  }
  _onLevelLoaded(eventType, data) {
    if (this._ctx.$state.canPlay())
      return;
    const { type, live, totalduration: duration, targetduration } = data.details;
    const event = new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D(eventType, { detail: data });
    this._ctx.delegate._notify(
      "stream-type-change",
      live ? type === "EVENT" && Number.isFinite(duration) && targetduration >= 10 ? "live:dvr" : "live" : "on-demand",
      event
    );
    this._ctx.delegate._notify("duration-change", duration, event);
    const media = this._instance.media;
    if (this._instance.currentLevel === -1) {
      this._ctx.qualities[_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_1__.Q._setAuto](true, event);
    }
    for (const track of this._instance.audioTracks) {
      this._ctx.audioTracks[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.L._add](
        {
          id: track.id + "",
          label: track.name,
          language: track.lang || "",
          kind: "main"
        },
        event
      );
    }
    for (const level of this._instance.levels) {
      this._ctx.qualities[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.L._add](
        {
          id: (level.id ?? level.height + "p") + "",
          width: level.width,
          height: level.height,
          codec: level.codecSet,
          bitrate: level.bitrate
        },
        event
      );
    }
    media.dispatchEvent(new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("canplay", { trigger: event }));
  }
  _onError(eventType, data) {
    {
      this._ctx.logger?.errorGroup(`HLS error \`${eventType}\``).labelledLog("Media Element", this._instance?.media).labelledLog("HLS Instance", this._instance).labelledLog("Event Type", eventType).labelledLog("Data", data).labelledLog("Src", (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$state.source)).labelledLog("Media Store", { ...this._ctx.$state }).dispatch();
    }
    if (data.fatal) {
      switch (data.type) {
        case "networkError":
          this._onNetworkError(data.error);
          break;
        case "mediaError":
          this._instance?.recoverMediaError();
          break;
        default:
          this._onFatalError(data.error);
          break;
      }
    }
  }
  _onFragLoading() {
    if (this._retryLoadingTimer >= 0)
      this._clearRetryTimer();
  }
  _onNetworkError(error) {
    this._clearRetryTimer();
    this._instance?.startLoad();
    this._retryLoadingTimer = window.setTimeout(() => {
      this._retryLoadingTimer = -1;
      this._onFatalError(error);
    }, 5e3);
  }
  _clearRetryTimer() {
    clearTimeout(this._retryLoadingTimer);
    this._retryLoadingTimer = -1;
  }
  _onFatalError(error) {
    this._instance?.destroy();
    this._instance = null;
    this._ctx.delegate._notify("error", {
      message: error.message,
      code: 1,
      error
    });
  }
  _enableAutoQuality() {
    if (this._instance)
      this._instance.currentLevel = -1;
  }
  _onQualityChange() {
    const { qualities } = this._ctx;
    if (!this._instance || qualities.auto)
      return;
    this._instance[qualities.switch + "Level"] = qualities.selectedIndex;
    if (_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.I)
      this._video.currentTime = this._video.currentTime;
  }
  _onAudioChange() {
    const { audioTracks } = this._ctx;
    if (this._instance && this._instance.audioTrack !== audioTracks.selectedIndex) {
      this._instance.audioTrack = audioTracks.selectedIndex;
    }
  }
  _loadSource(src) {
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(src.src))
      return;
    this._clearRetryTimer();
    this._instance?.loadSource(src.src);
  }
  _destroy() {
    this._clearRetryTimer();
    if (this._ctx)
      this._ctx.qualities[_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_1__.Q._enableAuto] = void 0;
    this._instance?.destroy();
    this._instance = null;
    this._stopLiveSync?.();
    this._stopLiveSync = null;
    this._ctx?.logger?.info("\u{1F3D7}\uFE0F Destroyed HLS instance");
  }
}

class HLSLibLoader {
  constructor(_lib, _ctx, _callback) {
    this._lib = _lib;
    this._ctx = _ctx;
    this._callback = _callback;
    this._startLoading();
  }
  async _startLoading() {
    this._ctx.logger?.info("\u{1F3D7}\uFE0F Loading HLS Library");
    const callbacks = {
      onLoadStart: this._onLoadStart.bind(this),
      onLoaded: this._onLoaded.bind(this),
      onLoadError: this._onLoadError.bind(this)
    };
    let ctor = await loadHLSScript(this._lib, callbacks);
    if ((0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(ctor) && !(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(this._lib))
      ctor = await importHLS(this._lib, callbacks);
    if (!ctor)
      return null;
    if (!ctor.isSupported()) {
      const message = "[vidstack]: `hls.js` is not supported in this environment";
      this._ctx.logger?.error(message);
      this._ctx.player.dispatch(new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("hls-unsupported"));
      this._ctx.delegate._notify("error", { message, code: 4 });
      return null;
    }
    return ctor;
  }
  _onLoadStart() {
    {
      this._ctx.logger?.infoGroup("Starting to load `hls.js`").labelledLog("URL", this._lib).dispatch();
    }
    this._ctx.player.dispatch(new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("hls-lib-load-start"));
  }
  _onLoaded(ctor) {
    {
      this._ctx.logger?.infoGroup("Loaded `hls.js`").labelledLog("Library", this._lib).labelledLog("Constructor", ctor).dispatch();
    }
    this._ctx.player.dispatch(
      new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("hls-lib-loaded", {
        detail: ctor
      })
    );
    this._callback(ctor);
  }
  _onLoadError(e) {
    const error = (0,_chunks_vidstack_wDXs_Qf_js__WEBPACK_IMPORTED_MODULE_1__.c)(e);
    {
      this._ctx.logger?.errorGroup("Failed to load `hls.js`").labelledLog("Library", this._lib).labelledLog("Error", e).dispatch();
    }
    this._ctx.player.dispatch(
      new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("hls-lib-load-error", {
        detail: error
      })
    );
    this._ctx.delegate._notify("error", {
      message: error.message,
      code: 4,
      error
    });
  }
}
async function importHLS(loader, callbacks = {}) {
  if ((0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(loader))
    return void 0;
  callbacks.onLoadStart?.();
  if (loader.prototype && loader.prototype !== Function) {
    callbacks.onLoaded?.(loader);
    return loader;
  }
  try {
    const ctor = (await loader())?.default;
    if (ctor && !!ctor.isSupported) {
      callbacks.onLoaded?.(ctor);
    } else {
      throw Error(
         true ? "[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor." : 0
      );
    }
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}
async function loadHLSScript(src, callbacks = {}) {
  if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(src))
    return void 0;
  callbacks.onLoadStart?.();
  try {
    await (0,_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__.l)(src);
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.x)(window.Hls)) {
      throw Error(
         true ? "[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window" : 0
      );
    }
    const ctor = window.Hls;
    callbacks.onLoaded?.(ctor);
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}

const JS_DELIVR_CDN = "https://cdn.jsdelivr.net";
class HLSProvider extends _vidstack_video_js__WEBPACK_IMPORTED_MODULE_5__.VideoProvider {
  constructor() {
    super(...arguments);
    this.$$PROVIDER_TYPE = "HLS";
    this._ctor = null;
    this._controller = new HLSController(this.video);
    this._library = `${JS_DELIVR_CDN}/npm/hls.js@^1.0.0/dist/hls${".js" }`;
  }
  /**
   * The `hls.js` constructor.
   */
  get ctor() {
    return this._ctor;
  }
  /**
   * The current `hls.js` instance.
   */
  get instance() {
    return this._controller.instance;
  }
  static {
    /**
     * Whether `hls.js` is supported in this environment.
     */
    this.supported = (0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_4__.i)();
  }
  get type() {
    return "hls";
  }
  get canLiveSync() {
    return true;
  }
  /**
   * The `hls.js` configuration object.
   *
   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}
   */
  get config() {
    return this._controller._config;
  }
  set config(config) {
    this._controller._config = config;
  }
  /**
   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.
   *
   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`
   */
  get library() {
    return this._library;
  }
  set library(library) {
    this._library = library;
  }
  preconnect() {
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(this._library))
      return;
    (0,_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_3__.p)(this._library);
  }
  setup(ctx) {
    super.setup(ctx);
    new HLSLibLoader(this._library, ctx, (ctor) => {
      this._ctor = ctor;
      this._controller.setup(ctor, ctx);
      ctx.delegate._notify("provider-setup", this);
      const src = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(ctx.$state.source);
      if (src)
        this.loadSource(src);
    });
  }
  async loadSource(src, preload) {
    if (!(0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(src.src))
      return;
    this._media.preload = preload || "";
    this._controller._loadSource(src);
    this._currentSrc = src;
  }
  /**
   * The given callback is invoked when a new `hls.js` instance is created and right before it's
   * attached to media.
   */
  onInstance(callback) {
    const instance = this._controller.instance;
    if (instance)
      callback(instance);
    this._controller._callbacks.add(callback);
    return () => this._controller._callbacks.delete(callback);
  }
  destroy() {
    this._controller._destroy();
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dist/dev/providers/vidstack-video.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/providers/vidstack-video.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VideoProvider: () => (/* binding */ VideoProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-S5-ZnP-2.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-S5-ZnP-2.js");
/* harmony import */ var _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vidstack-html.js */ "./node_modules/vidstack/dist/dev/providers/vidstack-html.js");
/* harmony import */ var _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-Yx-0ZQdX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-Yx-0ZQdX.js");







class NativeHLSTextTracks {
  constructor(_video, _ctx) {
    this._video = _video;
    this._ctx = _ctx;
    _video.textTracks.onaddtrack = this._onAddTrack.bind(this);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(this._onDispose.bind(this));
  }
  _onAddTrack(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this._video, nativeTrack))
      return;
    const track = new _chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.b({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._native] = { track: nativeTrack };
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._readyState] = 2;
    track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._nativeHLS] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this._ctx.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  _onDispose() {
    this._video.textTracks.onaddtrack = null;
    for (const track of this._ctx.textTracks) {
      const nativeTrack = track[_chunks_vidstack_Yx_0ZQdX_js__WEBPACK_IMPORTED_MODULE_1__.T._native]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this._video = _video;
    this._media = _media;
    this._onChange = (active, event) => {
      this._media.delegate._notify("picture-in-picture-change", active, event);
    };
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "enterpictureinpicture", this._onEnter.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "leavepictureinpicture", this._onExit.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this._video;
  }
  get supported() {
    return (0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.d)(this._video);
  }
  async enter() {
    return this._video.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  _onEnter(event) {
    this._onChange(true, event);
  }
  _onExit(event) {
    this._onChange(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this._video = _video;
    this._media = _media;
    this._mode = "inline";
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._video, "webkitpresentationmodechanged", this._onModeChange.bind(this));
  }
  get _supported() {
    return (0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.e)(this._video);
  }
  async _setPresentationMode(mode) {
    if (this._mode === mode)
      return;
    this._video.webkitSetPresentationMode(mode);
  }
  _onModeChange(event) {
    const prevMode = this._mode;
    this._mode = this._video.webkitPresentationMode;
    {
      this._media.logger?.infoGroup("presentation mode change").labelledLog("Mode", this._mode).labelledLog("Event", event).dispatch();
    }
    this._media.player?.dispatch(
      new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("video-presentation-change", {
        detail: this._mode,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this._mode === type || prevMode === type) {
        this._media.delegate._notify(`${type}-change`, this._mode === type, event);
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this._presentation = _presentation;
  }
  get active() {
    return this._presentation._mode === "fullscreen";
  }
  get supported() {
    return this._presentation._supported;
  }
  async enter() {
    this._presentation._setPresentationMode("fullscreen");
  }
  async exit() {
    this._presentation._setPresentationMode("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this._presentation = _presentation;
  }
  get active() {
    return this._presentation._mode === "picture-in-picture";
  }
  get supported() {
    return this._presentation._supported;
  }
  async enter() {
    this._presentation._setPresentationMode("picture-in-picture");
  }
  async exit() {
    this._presentation._setPresentationMode("inline");
  }
}

class VideoProvider extends _vidstack_html_js__WEBPACK_IMPORTED_MODULE_3__.HTMLMediaProvider {
  constructor(video, ctx) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.s)(() => {
      if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.e)(video)) {
        const presentation = new VideoPresentation(video, ctx);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.d)(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, ctx);
      }
    }, this.scope);
  }
  get type() {
    return "video";
  }
  setup(ctx) {
    super.setup(ctx);
    if ((0,_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.b)(this.video)) {
      new NativeHLSTextTracks(this.video, ctx);
    }
    ctx.textRenderers._attachVideo(this.video);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(() => {
      ctx.textRenderers._attachVideo(null);
    });
    if (this.type === "video")
      ctx.delegate._notify("provider-setup", this);
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this._media;
  }
}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_vidstack_dist_dev_providers_vidstack-hls_js.bundle.js.map