"use strict";
(self["webpackChunkmp3chapters_player"] = self["webpackChunkmp3chapters_player"] || []).push([["vendors-node_modules_vidstack_dist_dev_providers_vidstack-html_js"],{

/***/ "./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js":
/*!********************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ RAFLoop)
/* harmony export */ });
/* harmony import */ var _vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");


class RAFLoop {
  constructor(_callback) {
    this._callback = _callback;
  }
  _start() {
    if (!(0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(this._id))
      return;
    this._loop();
  }
  _stop() {
    if ((0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.a)(this._id))
      window.cancelAnimationFrame(this._id);
    this._id = void 0;
  }
  _loop() {
    this._id = window.requestAnimationFrame(() => {
      if ((0,_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.i)(this._id))
        return;
      this._callback();
      this._loop();
    });
  }
}




/***/ }),

/***/ "./node_modules/vidstack/dist/dev/providers/vidstack-html.js":
/*!*******************************************************************!*\
  !*** ./node_modules/vidstack/dist/dev/providers/vidstack-html.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   HTMLMediaProvider: () => (/* binding */ HTMLMediaProvider)
/* harmony export */ });
/* harmony import */ var _chunks_vidstack_ZF6S2MdD_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../chunks/vidstack-ZF6S2MdD.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-ZF6S2MdD.js");
/* harmony import */ var _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../chunks/vidstack-KTx0QncX.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-KTx0QncX.js");
/* harmony import */ var _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../chunks/vidstack-IUoxhowK.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-IUoxhowK.js");
/* harmony import */ var _chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../chunks/vidstack-S5-ZnP-2.js */ "./node_modules/vidstack/dist/dev/chunks/vidstack-S5-ZnP-2.js");





class HTMLMediaEvents {
  constructor(_provider, _ctx) {
    this._provider = _provider;
    this._ctx = _ctx;
    this._disposal = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.L)();
    this._waiting = false;
    this._attachedLoadStart = false;
    this._attachedCanPlay = false;
    this._timeRAF = new _chunks_vidstack_IUoxhowK_js__WEBPACK_IMPORTED_MODULE_1__.R(this._onAnimationFrame.bind(this));
    this._handlers = /* @__PURE__ */ new Map() ;
    this._handleDevEvent = this._onDevEvent.bind(this) ;
    this._attachInitialListeners();
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.e)(this._attachTimeUpdate.bind(this));
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(this._onDispose.bind(this));
  }
  get _media() {
    return this._provider.media;
  }
  get _notify() {
    return this._ctx.delegate._notify;
  }
  _onDispose() {
    this._attachedLoadStart = false;
    this._attachedCanPlay = false;
    this._timeRAF._stop();
    this._disposal.empty();
  }
  /**
   * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress
   * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps
   * resolve that by retrieving time updates in a request animation frame loop.
   */
  _onAnimationFrame() {
    const newTime = this._media.currentTime;
    if (this._ctx.$state.currentTime() !== newTime)
      this._updateCurrentTime(newTime);
  }
  _attachInitialListeners() {
    {
      this._ctx.logger?.info("attaching initial listeners");
    }
    this._attachEventListener("loadstart", this._onLoadStart);
    this._attachEventListener("abort", this._onAbort);
    this._attachEventListener("emptied", this._onEmptied);
    this._attachEventListener("error", this._onError);
    this._attachEventListener("volumechange", this._onVolumeChange);
    this._ctx.logger?.debug("attached initial media event listeners");
  }
  _attachLoadStartListeners() {
    if (this._attachedLoadStart)
      return;
    {
      this._ctx.logger?.info("attaching load start listeners");
    }
    this._disposal.add(
      this._attachEventListener("loadeddata", this._onLoadedData),
      this._attachEventListener("loadedmetadata", this._onLoadedMetadata),
      this._attachEventListener("canplay", this._onCanPlay),
      this._attachEventListener("canplaythrough", this._onCanPlayThrough),
      this._attachEventListener("durationchange", this._onDurationChange),
      this._attachEventListener("play", this._onPlay),
      this._attachEventListener("progress", this._onProgress),
      this._attachEventListener("stalled", this._onStalled),
      this._attachEventListener("suspend", this._onSuspend)
    );
    this._attachedLoadStart = true;
  }
  _attachCanPlayListeners() {
    if (this._attachedCanPlay)
      return;
    {
      this._ctx.logger?.info("attaching can play listeners");
    }
    this._disposal.add(
      this._attachEventListener("pause", this._onPause),
      this._attachEventListener("playing", this._onPlaying),
      this._attachEventListener("ratechange", this._onRateChange),
      this._attachEventListener("seeked", this._onSeeked),
      this._attachEventListener("seeking", this._onSeeking),
      this._attachEventListener("ended", this._onEnded),
      this._attachEventListener("waiting", this._onWaiting)
    );
    this._attachedCanPlay = true;
  }
  _attachEventListener(eventType, handler) {
    this._handlers.set(eventType, handler);
    return (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(
      this._media,
      eventType,
      this._handleDevEvent 
    );
  }
  _onDevEvent(event2) {
    this._ctx.logger?.debugGroup(`\u{1F4FA} provider fired \`${event2.type}\``).labelledLog("Provider", this._provider).labelledLog("Event", event2).labelledLog("Media Store", { ...this._ctx.$state }).dispatch();
    this._handlers.get(event2.type)?.call(this, event2);
  }
  _updateCurrentTime(time, trigger) {
    const detail = {
      // Avoid errors where `currentTime` can have higher precision.
      currentTime: Math.min(time, this._ctx.$state.seekableEnd()),
      played: this._media.played
    };
    this._notify("time-update", detail, trigger);
  }
  _onLoadStart(event2) {
    if (this._media.networkState === 3) {
      this._onAbort(event2);
      return;
    }
    this._attachLoadStartListeners();
    this._notify("load-start", void 0, event2);
  }
  _onAbort(event2) {
    this._notify("abort", void 0, event2);
  }
  _onEmptied() {
    this._notify("emptied", void 0, event);
  }
  _onLoadedData(event2) {
    this._notify("loaded-data", void 0, event2);
  }
  _onLoadedMetadata(event2) {
    this._attachCanPlayListeners();
    this._notify("loaded-metadata", void 0, event2);
    if (_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.g && (0,_chunks_vidstack_ZF6S2MdD_js__WEBPACK_IMPORTED_MODULE_3__.i)(this._ctx.$state.source())) {
      this._ctx.delegate._ready(this._getCanPlayDetail(), event2);
    }
  }
  _getCanPlayDetail() {
    return {
      provider: (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.p)(this._ctx.$provider),
      duration: this._media.duration,
      buffered: this._media.buffered,
      seekable: this._media.seekable
    };
  }
  _onPlay(event2) {
    if (!this._ctx.$state.canPlay)
      return;
    this._notify("play", void 0, event2);
  }
  _onPause(event2) {
    if (this._media.readyState === 1 && !this._waiting)
      return;
    this._waiting = false;
    this._timeRAF._stop();
    this._notify("pause", void 0, event2);
  }
  _onCanPlay(event2) {
    this._ctx.delegate._ready(this._getCanPlayDetail(), event2);
  }
  _onCanPlayThrough(event2) {
    if (this._ctx.$state.started())
      return;
    this._notify("can-play-through", this._getCanPlayDetail(), event2);
  }
  _onPlaying(event2) {
    this._waiting = false;
    this._notify("playing", void 0, event2);
    this._timeRAF._start();
  }
  _onStalled(event2) {
    this._notify("stalled", void 0, event2);
    if (this._media.readyState < 3) {
      this._waiting = true;
      this._notify("waiting", void 0, event2);
    }
  }
  _onWaiting(event2) {
    if (this._media.readyState < 3) {
      this._waiting = true;
      this._notify("waiting", void 0, event2);
    }
  }
  _onEnded(event2) {
    this._timeRAF._stop();
    this._updateCurrentTime(this._media.duration, event2);
    this._notify("end", void 0, event2);
    if (this._ctx.$state.loop()) {
      const hasCustomControls = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.M)(this._media.controls);
      if (hasCustomControls)
        this._media.controls = false;
    }
  }
  _attachTimeUpdate() {
    if (this._ctx.$state.paused()) {
      (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._media, "timeupdate", this._onTimeUpdate.bind(this));
    }
  }
  _onTimeUpdate(event2) {
    this._updateCurrentTime(this._media.currentTime, event2);
  }
  _onDurationChange(event2) {
    if (this._ctx.$state.ended()) {
      this._updateCurrentTime(this._media.duration, event2);
    }
    this._notify("duration-change", this._media.duration, event2);
  }
  _onVolumeChange(event2) {
    const detail = {
      volume: this._media.volume,
      muted: this._media.muted
    };
    this._notify("volume-change", detail, event2);
  }
  _onSeeked(event2) {
    this._updateCurrentTime(this._media.currentTime, event2);
    this._notify("seeked", this._media.currentTime, event2);
    if (Math.trunc(this._media.currentTime) === Math.trunc(this._media.duration) && (0,_chunks_vidstack_ZF6S2MdD_js__WEBPACK_IMPORTED_MODULE_3__.g)(this._media.duration) > (0,_chunks_vidstack_ZF6S2MdD_js__WEBPACK_IMPORTED_MODULE_3__.g)(this._media.currentTime)) {
      this._updateCurrentTime(this._media.duration, event2);
      if (!this._media.ended) {
        this._ctx.player.dispatch(
          new _chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.D("media-play-request", {
            trigger: event2
          })
        );
      }
    }
  }
  _onSeeking(event2) {
    this._notify("seeking", this._media.currentTime, event2);
  }
  _onProgress(event2) {
    const detail = {
      buffered: this._media.buffered,
      seekable: this._media.seekable
    };
    this._notify("progress", detail, event2);
  }
  _onSuspend(event2) {
    this._notify("suspend", void 0, event2);
  }
  _onRateChange(event2) {
    this._notify("rate-change", this._media.playbackRate, event2);
  }
  _onError(event2) {
    const error = this._media.error;
    if (!error)
      return;
    const detail = {
      message: error.message,
      code: error.code,
      mediaError: error
    };
    this._notify("error", detail, event2);
  }
}

class NativeAudioTracks {
  constructor(_provider, _ctx) {
    this._provider = _provider;
    this._ctx = _ctx;
    this._nativeTracks.onaddtrack = this._onAddNativeTrack.bind(this);
    this._nativeTracks.onremovetrack = this._onRemoveNativeTrack.bind(this);
    this._nativeTracks.onchange = this._onChangeNativeTrack.bind(this);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.l)(this._ctx.audioTracks, "change", this._onChangeTrack.bind(this));
  }
  get _nativeTracks() {
    return this._provider.media.audioTracks;
  }
  _onAddNativeTrack(event) {
    const _track = event.track;
    if (_track.label === "")
      return;
    const audioTrack = {
      id: _track.id + "",
      label: _track.label,
      language: _track.language,
      kind: _track.kind,
      selected: false
    };
    this._ctx.audioTracks[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.L._add](audioTrack, event);
    if (_track.enabled)
      audioTrack.selected = true;
  }
  _onRemoveNativeTrack(event) {
    const track = this._ctx.audioTracks.getById(event.track.id);
    if (track)
      this._ctx.audioTracks[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.L._remove](track, event);
  }
  _onChangeNativeTrack(event) {
    let enabledTrack = this._getEnabledNativeTrack();
    if (!enabledTrack)
      return;
    const track = this._ctx.audioTracks.getById(enabledTrack.id);
    if (track)
      this._ctx.audioTracks[_chunks_vidstack_S5_ZnP_2_js__WEBPACK_IMPORTED_MODULE_2__.L._select](track, true, event);
  }
  _getEnabledNativeTrack() {
    return Array.from(this._nativeTracks).find((track) => track.enabled);
  }
  _onChangeTrack(event) {
    const { current } = event.detail;
    if (!current)
      return;
    const track = this._nativeTracks.getTrackById(current.id);
    if (track) {
      const prev = this._getEnabledNativeTrack();
      if (prev)
        prev.enabled = false;
      track.enabled = true;
    }
  }
}

class HTMLMediaProvider {
  constructor(_media) {
    this._media = _media;
    this.scope = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.q)();
    this._currentSrc = null;
  }
  setup(ctx) {
    new HTMLMediaEvents(this, ctx);
    if ("audioTracks" in this.media)
      new NativeAudioTracks(this, ctx);
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.o)(() => {
      this._media.setAttribute("src", "");
      this._media.load();
    });
  }
  get type() {
    return "";
  }
  get media() {
    return this._media;
  }
  get currentSrc() {
    return this._currentSrc;
  }
  setPlaybackRate(rate) {
    this._media.playbackRate = rate;
  }
  async play() {
    return this._media.play();
  }
  async pause() {
    return this._media.pause();
  }
  setMuted(muted) {
    this._media.muted = muted;
  }
  setVolume(volume) {
    this._media.volume = volume;
  }
  setCurrentTime(time) {
    this._media.currentTime = time;
  }
  setPlaysinline(playsinline) {
    (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.k)(this._media, "playsinline", playsinline);
  }
  async loadSource({ src, type }, preload) {
    this._media.preload = preload || "";
    if ((0,_chunks_vidstack_ZF6S2MdD_js__WEBPACK_IMPORTED_MODULE_3__.a)(src)) {
      this._media.srcObject = src;
    } else {
      this._media.srcObject = null;
      this._media.src = (0,_chunks_vidstack_KTx0QncX_js__WEBPACK_IMPORTED_MODULE_0__.r)(src) ? src : window.URL.createObjectURL(src);
    }
    this._media.load();
    this._currentSrc = {
      src,
      type
    };
  }
}




/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_vidstack_dist_dev_providers_vidstack-html_js.bundle.js.map